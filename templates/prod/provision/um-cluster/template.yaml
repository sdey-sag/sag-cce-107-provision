alias: um-cluster-prod
description: Universal Messaging Provisioning
version: 1.0
dslVersion: "1.2"
options:
#Default value =false
  forceRestartWhenDone: true
#Default value =false
  abortOnConfigFailure: true
#Default value =false
  abortOnLayerStartupFailure: ${abortOnLayerStartupFailure}
changes:
  - 1.0 initial version Universal Messaging cluster installation

environments:
  default:
    cc.installer:                        ${}
    nodes.install.dir:                   ${}
    nodes.spm.is.secure.connection:      true
    nodes.spm.port:                      ${}
    nodes.ssh.login.credentials.key:     ${}
    nodes.hosts:                         ${}
    nodes.ssh.port:                      22
    repo.product:                        ${}
    repo.fix:                            ${}
    spm.fixes:                           ${}
    #SPM variable
    nodes.domain.prefix:                 ${}
    # Universal Messaging Server. See um-layer template for parameters documentation
    um.fixes:                            ${}
    um.instance.port:                    ${}
    um.memory.init:                      ${}
    um.memory.max:                       ${}
    um.memory.direct:                    ${}
    um.product.configure:                ${}
    um.instance1.configure:              ${}
    um.instance2.configure:              ${}
    um.instance3.configure:              ${}
    um.instance.name.1:                  ${}
    um.instance.name.2:                  ${}
    um.instance.name.3:                  ${}
    um.cluster.configure:                ${}
    um.numrealmserver.license.key:       ${}
    um.cluster.name:                     ${}
    um.cluster.url:                      ${}
    um.jndi.cf:                          ${}

 
layers:
  default:
    productRepo: ${repo.product}
    fixRepo:     ${repo.fix}

  spm:
    description: Management layer of SPM
    templates:   spm           # spm templates to provision
  um-product:                                      # um-layer templates
    description: Universal Messaging Layer
    templates:   ${um.product.configure}
  um1:                                      # um-layer templates
    description: Universal Messaging Layer
    templates:   ${um.instance1.configure}
  um2:                                      # um-layer templates
    description: Universal Messaging Layer
    templates:   ${um.instance2.configure}
  um3:                                      # um-layer templates
    description: Universal Messaging Layer
    templates:   ${um.instance3.configure}
  um-cluster:                                      # um-layer templates
    description: Universal Messaging Layer
    templates:   ${um.cluster.configure}    


templates:
  spm:
    description: Infrastructure template
    fixes:   ${spm.fixes}
    products:
      SPM:

  um-product:
    description: Universal Messaging Product installations
    licenses:                                                      # lisenses to copy from central license repository
      "UniversalMessaging/server/templates/licence.xml": "${um.numrealmserver.license.key}" # license file
    products:
      NUMRepository:
      NUMInstanceManager:
      NUMRealmServer:
      NUMEnterpriseManager:
        em:
          runtimeComponentId: Universal-Messaging-${instance.name}
      NUMClient:
    fixes: ${um.fixes}


  um-instance1:
    description: UM instance 1
    products:
      NUMRealmServer:
        ${um.instance.name.1}:
          instance.port: ${um.instance.port}                                #Port number which the um instane listens to
          instance.ip: "0.0.0.0"                                            #IP address to which the instance is binded to
          runtimeComponentId: Universal-Messaging-${um.instance.name.1}
          configuration:
            Universal-Messaging-${instance.name}: 
              COMMON-MEMORY:                                                # make a label to re-use configuration
                COMMON-MEMORY:                                              # customize JVM memory
                  InitSize: ${um.memory.init}
                  MaxSize:  ${um.memory.max}
                  ExtendedProperties:                                       # extended JVM setting
                    Property: 
                      - 
                       "@name": "-XX:MaxDirectMemorySize"
                       $: ${um.memory.direct}
  um-instance2:
    description: UM instance 2
    products:
      NUMRealmServer:
        ${um.instance.name.2}:
          instance.port: ${um.instance.port}                                #Port number which the um instane listens to
          instance.ip: "0.0.0.0"                                            #IP address to which the instance is binded to
          runtimeComponentId: Universal-Messaging-${um.instance.name.2}
          configuration:
            Universal-Messaging-${instance.name}: 
              COMMON-MEMORY:                                                # make a label to re-use configuration
                COMMON-MEMORY:                                              # customize JVM memory
                  InitSize: ${um.memory.init}
                  MaxSize:  ${um.memory.max}
                  ExtendedProperties:                                       # extended JVM setting
                    Property: 
                      - 
                       "@name": "-XX:MaxDirectMemorySize"
                       $: ${um.memory.direct}

  um-instance3:
    description: UM instance 3
    products:
      NUMRealmServer:
        ${um.instance.name.3}:
          instance.port: ${um.instance.port}                                #Port number which the um instane listens to
          instance.ip: "0.0.0.0"    
          runtimeComponentId: Universal-Messaging-${um.instance.name.3}
          configuration:
            Universal-Messaging-${instance.name}: 
              COMMON-MEMORY:                                                # make a label to re-use configuration
                COMMON-MEMORY:                                              # customize JVM memory
                  InitSize: ${um.memory.init}
                  MaxSize:  ${um.memory.max}
                  ExtendedProperties:                                       # extended JVM setting
                    Property: 
                      - 
                       "@name": "-XX:MaxDirectMemorySize"
                       $: ${um.memory.direct}

  um-cluster:
    description: Cluster configuration for three UM instances
    products:
      NUMRealmServer:
        ${um.instance.name.1}:
          runtimeComponentId: Universal-Messaging-${um.instance.name.1}
          configuration:
            Universal-Messaging-${instance.name}:
              UM-JNDI-CF:
                UM-JNDI-CF-${um.jndi.cf}:
                  name: ${um.jndi.cf}
                  type: ConnectionFactory
                  url: ${um.cluster.url}
                  durableType: Shared
              COMMON-CLUSTER:
                COMMON-CLUSTER:
                  Name: ${um.cluster.name}
                  Servers:
                    Server:
                    - '@name': ${um.instance.name.1}
                      URL: nsp://${hosts[1]}:${um.instance.port}
                    - '@name': ${um.instance.name.2}
                      URL: nsp://${hosts[2]}:${um.instance.port}
                    - '@name': ${um.instance.name.3}
                      URL: nsp://${hosts[3]}:${um.instance.port}
   

provision:
  default:     # All environments have same set of nodes & layers. We do not need to have specific entry for environment type
    spm:
       hosts: ${nodes.hosts}
    um-product:
       hosts: ${nodes.hosts}
    um1:
       indexes: [1]
    um2:
       indexes: [2]
    um3:
       indexes: [3]
    um-cluster:
       indexes: [1]

nodes:
  default:
    aliasMapping:
      prefix: "${nodes.domain.prefix}"
      policy: INDEX
      overwrite: true
      delimiter: "-"
    default:
      port:  ${nodes.spm.port}
      secure: ${nodes.spm.is.secure.connection}
      bootstrapInfo:
        installer: ${cc.installer}
        installDir: ${nodes.install.dir}
        port:   ${nodes.ssh.port}
        credentials: ${nodes.ssh.login.credentials.key}       # SSH Key Alias